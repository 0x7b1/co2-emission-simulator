{"version":3,"sources":["vehicle-filter.js","card-legend.js","config.js","card-test-selector.js","app.js","serviceWorker.js","index.js"],"names":["VehicleFilter","props","value","min","max","step","onChange","formatTimeLabelThumb","formatTimeLabelTick","useStyletron","css","theme","overrides","ThumbValue","$value","$thumbIndex","className","position","top","sizing","scale1000","backgroundColor","typography","font100","TickBar","$min","$max","display","justifyContent","alignItems","paddingRight","scale600","paddingLeft","paddingBottom","scale400","ContainerInfo","styled","bottom","right","zIndex","width","CardLegend","co2ColorRange","this","style","height","transform","id","x1","y1","x2","y2","map","i","r","g","b","key","offset","stopColor","fill","fontFamily","textAnchor","fontSize","stroke","y","dy","textAlign","renderCO2LinearGauge","PureComponent","URL_PATH","console","log","process","TEST_CASES","SIMPLE","MONACO","TARTU","scenarios","urlData","initialPosition","latitude","longitude","config","mapStyle","mapboxToken","urlWs","onSelectTestCase","selectedTestCase","name","engine","Styletron","left","BASE_DATE","Date","getTime","App","getViewState","zoom","pitch","bearing","transitionDuration","transitionInterpolator","FlyToInterpolator","updateVehicleStep","vehiclePaths","stepTime","data","update","get","fromJS","path","timestamps","v","push","List","connectWS","ws","WebSocket","onopen","setState","onmessage","state","liveVehiclePaths","liveVehicleData","stepData","JSON","parse","lastTime","onerror","err","close","onclose","e","fetchData","a","json","rawData","stringify","histVehicleData","isEmpty","Error","timeRange","first","last","processHistoryData","error","filterDataRange","updatedHistoryData","target","viewState","onViewStateChange","Infinity","Map","histVehiclePaths","histVehicleDataFiltered","filterValue","isLiveMode","showTrips","showTrails","showVehicles","showEmissionsHist","showEmissionsLive","document","title","forEach","TripsLayer","getPath","toJS","getTimestamps","toArray","getColor","opacity","rounded","trailLength","MS_PER_SECOND","widthMinPixels","currentTime","ScatterplotLayer","getPosition","getFillColor","d","getRadius","pickable","filled","radiusMinPixels","radiusMaxPixels","HeatmapLayer","getWeight","colorRange","PathLayer","getWidth","size","t","format","moment","label","timeSeconds","closeable","variant","VARIANT","outlined","onClick","newRange","rangeMin","rangeMax","checkmarkType","STYLE_TYPE","toggle","checked","labelPlacement","LABEL_PLACEMENT","formatTimeLabel","renderResolutionFilter","values","sublist_","description","startDateMs","endDateMs","utc","diff","intervalTime","co2Values","renderStats","getRecorderTime","renderedLayers","getLiveLayers","getHistLayers","LightTheme","layers","initialViewState","controller","pickingRadius","reuseMaps","preventStyleDiffing","mapboxApiAccessToken","_renderTooltip","style_","borderBottom","$align","ALIGN","center","isError","renderStatsLive","renderStatsHist","renderLiveOptions","renderHistoryOptions","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80b80f5d.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Slider } from 'baseui/slider';\nimport { useStyletron } from 'baseui';\n\nfunction VehicleFilter(props) {\n  const {\n    value,\n    min,\n    max,\n    step,\n    onChange,\n    formatTimeLabelThumb,\n    formatTimeLabelTick,\n  } = props;\n  const [css, theme] = useStyletron();\n\n  return (\n    <Slider\n      value={value}\n      min={min}\n      max={max}\n      step={step}\n      onChange={onChange}\n      overrides={{\n        ThumbValue: ({ $value, $thumbIndex }) => (\n          <div\n            className={css({\n              position: 'absolute',\n              top: `-${theme.sizing.scale1000}`,\n              backgroundColor: 'transparent',\n              ...theme.typography.font100,\n            })}\n          >\n            {formatTimeLabelThumb($value[$thumbIndex])}\n          </div>\n        ),\n        TickBar: ({ $min, $max }) => (\n          <div\n            className={css({\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              paddingRight: theme.sizing.scale600,\n              paddingLeft: theme.sizing.scale600,\n              paddingBottom: theme.sizing.scale400,\n              ...theme.typography.font100,\n            })}\n          >\n            <div>{formatTimeLabelTick($min)}</div>\n            <div>{formatTimeLabelTick($max)}</div>\n          </div>\n        ),\n      }}\n    />\n  );\n}\n\nexport default VehicleFilter;\n","import React, { PureComponent } from 'react';\nimport { Card, StyledBody } from \"baseui/card\";\nimport { styled } from 'baseui';\nimport { Paragraph3 } from 'baseui/typography';\n\nconst ContainerInfo = styled('div', {\n  position: 'absolute',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  bottom: '20px',\n  right: '20px',\n  zIndex: 1,\n  width: '240px',\n});\n\nexport default class CardLegend extends PureComponent {\n  renderCO2LinearGauge() {\n    const { co2ColorRange } = this.props;\n\n    return (\n      <svg style={{ width: '100%', height: '30px' }}>\n        <g transform=\"translate(13, 0)\">\n          <linearGradient id=\"lineargradient\" x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"0\">\n            {\n              co2ColorRange.map(([r, g, b], i) => (\n                <stop key={i} offset={i / 10} stopColor={`rgb(${r}, ${g}, ${b})`} />\n              ))\n            }\n          </linearGradient>\n          <rect width='166' height='10' style={{ fill: 'url(\"#lineargradient\")' }}></rect>\n          <g transform=\"translate(0, 10)\" style={{ fill: 'none', fontFamily: 'sans-serif', textAnchor: 'middle', fontSize: 10 }} >\n            <g transform=\"translate(0.5,0)\">\n              <line stroke=\"currentColor\" y2=\"5\"></line>\n              <text fill=\"currentColor\" y=\"8\" dy=\"0.71em\">0</text>\n            </g>\n            <g transform=\"translate(83.5,0)\">\n              <line stroke=\"currentColor\" y2=\"5\"></line>\n              <text fill=\"currentColor\" y=\"8\" dy=\"0.71em\">2100</text>\n            </g>\n            <g transform=\"translate(165.5,0)\">\n              <line stroke=\"currentColor\" y2=\"5\"></line>\n              <text fill=\"currentColor\" y=\"8\" dy=\"0.71em\">5000</text>\n            </g>\n\n          </g>\n        </g>\n      </svg>\n    );\n  }\n\n  render() {\n    return (\n      <ContainerInfo>\n        <Card>\n          <StyledBody>\n            <Paragraph3 style={{ textAlign: 'center' }}>\n              CO2 intensity (mg)\n            </Paragraph3>\n            {this.renderCO2LinearGauge()}\n          </StyledBody>\n        </Card>\n      </ContainerInfo>\n    );\n  }\n}\n","// const scenario = process.env.REACT_APP_SCENARIO || 'simple';\n// const HOST = '172.31.146.171';\nconst HOST = '127.0.0.1';\n// const URL_PATH = `http://${HOST}:8080/api/vehicles`;\nconst URL_PATH = `https://0x7b1.github.io/co2-emission-simulator/data/`;\n\nconsole.log('->', process.env)\n\nconst TEST_CASES = {\n  SIMPLE: 'SIMPLE',\n  MONACO: 'MONACO',\n  TARTU: 'TARTU',\n};\n\nconst scenarios = {\n  [TEST_CASES.SIMPLE]: {\n    urlData: `${URL_PATH}/simple.json`,\n    // urlData: `${URL_PATH}?scenario=simple`,\n    initialPosition: {\n      latitude: 58.30079260885314,\n      longitude: 26.60045353923848,\n    },\n  },\n  [TEST_CASES.TARTU]: {\n    urlData: `${URL_PATH}/tartu.json`,\n    // urlData: `${URL_PATH}?scenario=tartu`,\n    initialPosition: {\n      latitude: 58.38121869628752,\n      longitude: 26.73278172091453,\n    },\n  },\n  [TEST_CASES.MONACO]: {\n    urlData: `${URL_PATH}/monaco.json`,\n    // urlData: `${URL_PATH}?scenario=monaco`,\n    initialPosition: {\n      latitude: 43.72876951717807,\n      longitude: 7.381480783579958,\n    },\n  },\n};\n\n// const { initialPosition, urlData } = scenarios[scenario];\n\nconst config = {\n  mapStyle: 'mapbox://styles/mapbox/dark-v9',\n  mapboxToken: 'pk.eyJ1IjoiMHg3YjEiLCJhIjoiY2lwbHMxNnRvMDJkZXU5bmozYjF1a3UyYSJ9.ec73WL0KE8xDc9JFrchXPg',\n  urlWs: `ws://${HOST}:8081/ws`,\n  co2ColorRange: [\n    [42, 163, 100],\n    [162, 206, 86],\n    [240, 225, 75],\n    [222, 191, 68],\n    [205, 158, 61],\n    [188, 124, 53],\n    [171, 91, 46],\n    [143, 61, 35],\n    [82, 39, 12],\n    [56, 29, 2],\n  ],\n}\n\nexport default {\n  scenarios,\n  config,\n  TEST_CASES,\n};\n","import React, { PureComponent } from 'react';\nimport { Card, StyledBody } from \"baseui/card\";\nimport { styled } from 'baseui';\nimport { Paragraph3 } from 'baseui/typography';\nimport { ButtonGroup } from \"baseui/button-group\";\nimport { Button, SIZE } from \"baseui/button\";\nimport { Radio, RadioGroup } from 'baseui/radio';\n\nimport config from './config';\n\nconst { TEST_CASES } = config;\n\n\nconst ContainerInfo = styled('div', {\n  position: 'absolute',\n  display: 'flex',\n  justifyContent: 'left',\n  alignItems: 'center',\n  right: '20px',\n  top: '20px',\n});\n\nexport default class CardLegend extends PureComponent {\n  renderCO2LinearGauge() {\n    const { co2ColorRange } = this.props;\n\n    return (\n      <svg style={{ width: '100%', height: '30px' }}>\n        <g transform=\"translate(13, 0)\">\n          <linearGradient id=\"lineargradient\" x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"0\">\n            {\n              co2ColorRange.map(([r, g, b], i) => (\n                <stop key={i} offset={i / 10} stopColor={`rgb(${r}, ${g}, ${b})`} />\n              ))\n            }\n          </linearGradient>\n          <rect width='166' height='10' style={{ fill: 'url(\"#lineargradient\")' }}></rect>\n          <g transform=\"translate(0, 10)\" style={{ fill: 'none', fontFamily: 'sans-serif', textAnchor: 'middle', fontSize: 10 }} >\n            <g transform=\"translate(0.5,0)\">\n              <line stroke=\"currentColor\" y2=\"5\"></line>\n              <text fill=\"currentColor\" y=\"8\" dy=\"0.71em\">0</text>\n            </g>\n            <g transform=\"translate(83.5,0)\">\n              <line stroke=\"currentColor\" y2=\"5\"></line>\n              <text fill=\"currentColor\" y=\"8\" dy=\"0.71em\">2100</text>\n            </g>\n            <g transform=\"translate(165.5,0)\">\n              <line stroke=\"currentColor\" y2=\"5\"></line>\n              <text fill=\"currentColor\" y=\"8\" dy=\"0.71em\">5000</text>\n            </g>\n\n          </g>\n        </g>\n      </svg>\n    );\n  }\n  \n  render() {\n    const { onSelectTestCase, selectedTestCase } = this.props;\n\n    return (\n      <ContainerInfo>\n        <Card>\n          <StyledBody>\n            <Paragraph3>\n              Select the test scenario\n            </Paragraph3>\n            <RadioGroup\n              name=\"horizontal\"\n              onChange={onSelectTestCase}\n              value={selectedTestCase}\n            >\n              <Radio value={TEST_CASES.TARTU}>{TEST_CASES.TARTU}</Radio>\n              <Radio value={TEST_CASES.MONACO}>{TEST_CASES.MONACO}</Radio>\n              {/* <Radio value={TEST_CASES.SIMPLE}>{TEST_CASES.SIMPLE}</Radio> */}\n            </RadioGroup>\n          </StyledBody>\n        </Card>\n      </ContainerInfo>\n    );\n  }\n}\n\n","import React, { Component, Fragment } from 'react';\nimport { StaticMap } from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport { PathLayer, ScatterplotLayer } from '@deck.gl/layers';\nimport { FlyToInterpolator } from '@deck.gl/core';\nimport { HeatmapLayer } from '@deck.gl/aggregation-layers';\nimport { TripsLayer } from '@deck.gl/geo-layers';\nimport { FormControl } from 'baseui/form-control';\nimport { Card, StyledBody, StyledAction } from \"baseui/card\";\nimport { styled } from 'baseui';\nimport { Display4 } from 'baseui/typography';\nimport { Checkbox, LABEL_PLACEMENT, STYLE_TYPE } from \"baseui/checkbox\";\nimport { Tag, VARIANT } from \"baseui/tag\";\nimport { json } from 'd3-fetch';\nimport { Map, fromJS, List } from 'immutable';\nimport { Client as Styletron } from 'styletron-engine-atomic';\nimport { Provider as StyletronProvider } from 'styletron-react';\nimport { LightTheme, BaseProvider } from 'baseui';\nimport moment from 'moment';\nimport { ListItem, ListItemLabel } from \"baseui/list\";\nimport {\n  HeaderNavigation,\n  ALIGN,\n  StyledNavigationItem as NavigationItem,\n  StyledNavigationList as NavigationList,\n} from 'baseui/header-navigation';\nimport { Spinner } from 'baseui/spinner';\n\nimport VehicleFilter from './vehicle-filter';\nimport CardLegend from './card-legend';\nimport CardTestSelector from './card-test-selector';\nimport config from './config';\n\nconst {\n  scenarios,\n  TEST_CASES,\n  config: {\n    urlWs,\n    mapboxToken,\n    mapStyle,\n    co2ColorRange,\n  }\n} = config;\n\nconst engine = new Styletron();\nconst ContainerInfo = styled('div', {\n  position: 'absolute',\n  display: 'flex',\n  justifyContent: 'left',\n  alignItems: 'center',\n  left: '20px',\n  bottom: '20px',\n});\n\nconst BASE_DATE = new Date().getTime();\nconst MS_PER_SECOND = 1000;\nconst MS_PER_MINUTE = MS_PER_SECOND * 60;\nconst mapRange = (value, x1, y1, x2, y2) => (value - x1) * (y2 - x2) / (y1 - x1) + x2;\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    const timeRange = [Infinity, -Infinity];\n\n    this.state = {\n      viewState: this.getViewState(TEST_CASES.TARTU),\n      selectedTestCase: TEST_CASES.TARTU,\n      ws: null,\n      liveVehiclePaths: Map(),\n      liveVehicleData: List(),\n      histVehiclePaths: Map(),\n      histVehicleData: List(),\n      histVehicleDataFiltered: List(),\n      lastTime: 0,\n      timeRange,\n      filterValue: timeRange,\n      isLiveMode: false,\n      showTrips: true,\n      showTrails: false,\n      showVehicles: true,\n      showEmissionsHist: false,\n      showEmissionsLive: false,\n    };\n  }\n\n  getViewState = (selectedTestCase) => {\n    const { initialPosition, urlData } = scenarios[selectedTestCase];\n\n    return {\n      ...initialPosition,\n      zoom: 15,\n      pitch: 0,\n      bearing: 0,\n      // maxZoom: 17,\n      transitionDuration: 2000,\n      transitionInterpolator: new FlyToInterpolator(),\n    };\n  }\n\n  componentDidMount() {\n    document.title = 'CO2 Emission Visualizer';\n    this.fetchData();\n    this.connectWS();\n  }\n\n  updateVehicleStep = (vehiclePaths, stepTime, data) =>\n    vehiclePaths.update(\n      data.get('veh_id'),\n      fromJS({ path: [], timestamps: [] }),\n      v => v\n        .update('path', path => path.push(List([data.get('lng'), data.get('lat')])))\n        .update('timestamps', timestamps => timestamps.push(stepTime))\n        .update('co2', () => data.get('co2'))\n    )\n\n  connectWS = () => {\n    const ws = new WebSocket(urlWs);\n\n    ws.onopen = () => this.setState({ ws });\n    ws.onmessage = ({ data }) => {\n      const { liveVehiclePaths, liveVehicleData } = this.state;\n      const stepTime = new Date().getTime() - BASE_DATE;\n      const stepData = fromJS(JSON.parse(data));\n\n      this.setState({\n        liveVehiclePaths: this.updateVehicleStep(liveVehiclePaths, stepTime, stepData),\n        liveVehicleData: liveVehicleData.push(stepData),\n        lastTime: stepTime,\n      });\n    };\n    ws.onerror = err => ws.close();\n    ws.onclose = e => console.log('DISCONNECTED');\n  }\n\n  processHistoryData(histVehicleData, min = -Infinity, max = +Infinity) {\n    let histVehiclePaths = Map();\n    let histVehicleDataFiltered = List();\n\n    histVehicleData.forEach(data => {\n      const stepTime = new Date(data.get('time')).getTime();\n\n      if (stepTime >= min && stepTime <= max) {\n        histVehiclePaths = this.updateVehicleStep(histVehiclePaths, stepTime, data);\n        histVehicleDataFiltered = histVehicleDataFiltered.push(data);\n      }\n    });\n\n    return {\n      filterValue: [min, max],\n      histVehiclePaths,\n      histVehicleDataFiltered,\n    };\n  }\n\n  fetchData = async () => {\n    const { selectedTestCase } = this.state;\n    const { urlData } = scenarios[selectedTestCase];\n\n    try {\n      const rawData = await json(urlData);\n      console.log('->', JSON.stringify(rawData));\n      const histVehicleData = fromJS(rawData);\n\n      if (histVehicleData.isEmpty()) {\n        throw new Error('There is no data yet!');\n      }\n\n      const timeRange = [\n        new Date(histVehicleData.first().get('time')).getTime(),\n        new Date(histVehicleData.last().get('time')).getTime(),\n      ];\n\n      this.setState({\n        histVehicleData,\n        timeRange,\n        ...this.processHistoryData(histVehicleData, ...timeRange),\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  getLiveLayers() {\n    const {\n      liveVehiclePaths,\n      liveVehicleData,\n      lastTime,\n      showTrails,\n      showEmissionsLive,\n      showVehicles,\n    } = this.state;\n\n    return [\n      showTrails && new TripsLayer({\n        id: 'trips-layer',\n        data: liveVehiclePaths,\n        getPath: ([, d]) => d.get('path').toJS(),\n        getTimestamps: ([, d]) => d.get('timestamps').toArray(),\n        getColor: [255, 140, 0],\n        opacity: 0.9,\n        rounded: true,\n        trailLength: MS_PER_SECOND * 30,\n        widthMinPixels: 5,\n        currentTime: lastTime,\n      }),\n\n      showVehicles && new ScatterplotLayer({\n        id: 'vehicles-layer',\n        data: liveVehiclePaths,\n        getPosition: ([_, d]) => d.get('path').last().toArray(),\n        getFillColor: d => [255, 140, 0],\n        getRadius: d => 2,\n        pickable: true,\n        opacity: 0.8,\n        filled: true,\n        radiusMinPixels: 6,\n        radiusMaxPixels: 10,\n      }),\n\n      showEmissionsLive && new HeatmapLayer({\n        id: 'live-heatmap-layer',\n        data: liveVehicleData,\n        getPosition: d => [d.get('lng'), d.get('lat')],\n        getWeight: d => d.get('co2'),\n        colorRange: co2ColorRange,\n      }),\n    ];\n  }\n\n  getHistLayers() {\n    const {\n      showTrips,\n      showEmissionsHist,\n      histVehiclePaths,\n      histVehicleDataFiltered,\n    } = this.state;\n\n    // console.log('->', JSON.stringify(histVehiclePaths.toJS()));\n\n    return [\n      showTrips && new PathLayer({\n        id: 'path-layer',\n        data: histVehiclePaths,\n        pickable: true,\n        getPath: ([, d]) => d.get('path').toJS(),\n        getWidth: ([, d]) => mapRange(d.get('path').size, 0, 500, 2, 7),\n        getColor: () => [255, 140, 0],\n        opacity: 0.5,\n      }),\n\n      showEmissionsHist && new HeatmapLayer({\n        id: 'historical-heatmap-layer',\n        data: histVehicleDataFiltered,\n        getPosition: d => [d.get('lng'), d.get('lat')],\n        getWeight: d => d.get('co2'),\n        colorRange: co2ColorRange,\n      }),\n    ];\n  }\n\n  formatTimeLabel(t, format) {\n    return moment(t).format(format);\n  }\n\n  filterDataRange = ({ value: [min, max] }) => {\n    const { histVehicleData } = this.state;\n    const updatedHistoryData = this.processHistoryData(histVehicleData, min, max);\n\n    this.setState({\n      ...updatedHistoryData,\n    });\n  }\n\n  renderResolutionFilter(label, timeSeconds = 0) {\n    return (\n      <Tag\n        closeable={false}\n        variant={VARIANT.outlined}\n        onClick={() => {\n          const {\n            filterValue: [min,],\n            timeRange: [rangeMin, rangeMax],\n          } = this.state;\n          let newRange;\n\n          if (!timeSeconds) {\n            newRange = [rangeMin, rangeMax];\n          } else {\n            let max = min + timeSeconds * 1000;\n            if (max > rangeMax) {\n              max = rangeMax;\n            }\n\n            newRange = [min, max];\n          }\n\n          this.filterDataRange({\n            value: newRange,\n          });\n        }}\n      >\n        {label}\n      </Tag>\n    );\n  }\n\n  renderHistoryOptions() {\n    const {\n      showTrips,\n      showEmissionsHist,\n      timeRange,\n      filterValue,\n      histVehicleData,\n    } = this.state;\n\n    if (histVehicleData.isEmpty()) {\n      return (\n        <Spinner />\n      );\n    }\n\n    return (\n      <Fragment>\n        <FormControl>\n          <Checkbox\n            checkmarkType={STYLE_TYPE.toggle}\n            checked={showTrips}\n            onChange={({ target: { checked } }) => this.setState({ showTrips: checked })}\n            labelPlacement={LABEL_PLACEMENT.right}\n          >\n            Show Traveled Paths\n          </Checkbox>\n        </FormControl>\n        <FormControl>\n          <Checkbox\n            checkmarkType={STYLE_TYPE.toggle}\n            checked={showEmissionsHist}\n            onChange={({ target: { checked } }) => this.setState({ showEmissionsHist: checked })}\n            labelPlacement={LABEL_PLACEMENT.right}\n          >\n            Show Emissions\n          </Checkbox>\n        </FormControl>\n        <FormControl label='Date filter'>\n          <VehicleFilter\n            value={filterValue}\n            min={timeRange[0]}\n            max={timeRange[1]}\n            step={MS_PER_MINUTE}\n            formatTimeLabelThumb={t => this.formatTimeLabel(t, '(DD/MM) HH:mm:ss')}\n            formatTimeLabelTick={t => this.formatTimeLabel(t, 'DD/MM')}\n            onChange={this.filterDataRange}\n          />\n        </FormControl>\n        <FormControl label='Time resolution'>\n          <div>\n            {this.renderResolutionFilter('5s', 5)}\n            {this.renderResolutionFilter('30s', 30)}\n            {this.renderResolutionFilter('1m', 60)}\n            {this.renderResolutionFilter('10m', 60 * 10)}\n            {this.renderResolutionFilter('30m', 60 * 30)}\n            {this.renderResolutionFilter('1h', 60 * 60)}\n            {this.renderResolutionFilter('All')}\n          </div>\n        </FormControl>\n      </Fragment>\n    );\n  }\n\n  renderLiveOptions() {\n    const {\n      showTrails,\n      showVehicles,\n      showEmissionsLive,\n    } = this.state;\n\n    return (\n      <Fragment>\n        <FormControl>\n          <Checkbox\n            checkmarkType={STYLE_TYPE.toggle}\n            labelPlacement={LABEL_PLACEMENT.right}\n            checked={showVehicles}\n            onChange={({ target: { checked } }) => this.setState({ showVehicles: checked })}\n          >\n            Show Vehicles\n          </Checkbox>\n        </FormControl>\n        <FormControl>\n          <Checkbox\n            checkmarkType={STYLE_TYPE.toggle}\n            labelPlacement={LABEL_PLACEMENT.right}\n            checked={showTrails}\n            onChange={({ target: { checked } }) => this.setState({ showTrails: checked })}\n          >\n            Show Trails\n          </Checkbox>\n        </FormControl>\n        <FormControl>\n          <Checkbox\n            checkmarkType={STYLE_TYPE.toggle}\n            checked={showEmissionsLive}\n            onChange={({ target: { checked } }) => this.setState({ showEmissionsLive: checked })}\n            labelPlacement={LABEL_PLACEMENT.right}\n          >\n            Show Emissions\n          </Checkbox>\n        </FormControl>\n      </Fragment>\n    );\n  }\n\n  renderStats(values = []) {\n    return (\n      <ListItem sublist_>\n        {\n          values.map(({ value, description }, i) => (\n            <ListItemLabel key={i} description={value}>\n              {description}\n            </ListItemLabel>\n          ))\n        }\n      </ListItem>\n    );\n  }\n\n  getRecorderTime(startDateMs, endDateMs) {\n    return moment.utc(\n      moment(endDateMs).diff(moment(startDateMs))\n    ).format('HH:mm:ss');\n  }\n\n  getCO2Level(intervalTime, co2Values) {\n    return 0;\n  }\n\n  renderStatsHist() {\n    const {\n      timeRange,\n      histVehiclePaths,\n      histVehicleData,\n    } = this.state;\n\n    if (histVehicleData.isEmpty()) {\n      return null;\n    }\n\n    return this.renderStats([\n      { description: 'Vehicles', value: histVehiclePaths.size },\n      // { description: 'CO2 Level', value: '10ppm' },\n      { description: 'Recorded Time', value: this.getRecorderTime(...timeRange) },\n    ]);\n  }\n\n  renderStatsLive() {\n    const {\n      liveVehiclePaths,\n      lastTime\n    } = this.state;\n\n    return this.renderStats([\n      { description: 'Vehicles', value: liveVehiclePaths.size },\n      // { description: 'CO2 Level', value: '0ppm' },\n      { description: 'Recorded Time', value: this.getRecorderTime(BASE_DATE, lastTime + BASE_DATE) },\n    ]);\n  }\n\n  onSelectTestCase = e => {\n    const selectedTestCase = e.target.value;\n    const viewState = this.getViewState(selectedTestCase);\n    this.setState({\n      selectedTestCase,\n      viewState,\n    });\n  }\n\n  onViewStateChange = ({ viewState }) => {\n    this.setState({ viewState });\n  }\n\n  render() {\n    const {\n      isLiveMode,\n      viewState,\n      selectedTestCase,\n    } = this.state;\n\n    const renderedLayers = isLiveMode\n      ? this.getLiveLayers()\n      : this.getHistLayers();\n\n    return (\n      <StyletronProvider value={engine}>\n        <BaseProvider theme={LightTheme}>\n          <DeckGL\n            layers={renderedLayers}\n            initialViewState={viewState}\n            controller={true}\n            pickingRadius={5}\n            onViewStateChange={this.onViewStateChange}\n          >\n            <StaticMap\n              reuseMaps\n              mapStyle={mapStyle}\n              preventStyleDiffing={true}\n              mapboxApiAccessToken={mapboxToken}\n            />\n\n            {this._renderTooltip}\n          </DeckGL>\n          <CardTestSelector\n            selectedTestCase={selectedTestCase}\n            onSelectTestCase={this.onSelectTestCase} />\n          <ContainerInfo>\n            <Card>\n              <StyledBody>\n                <HeaderNavigation style_={{ borderBottom: 0 }}>\n                  <NavigationList $align={ALIGN.left}>\n                    <NavigationItem style={{ paddingLeft: 0 }}>\n                      <Display4>CO2 Emissions</Display4>\n                    </NavigationItem>\n                  </NavigationList>\n                  <NavigationList $align={ALIGN.center} />\n                  <NavigationList $align={ALIGN.right}>\n                    <NavigationItem>\n                      <Checkbox\n                        checkmarkType={STYLE_TYPE.toggle}\n                        isError\n                        checked={isLiveMode}\n                        onChange={({ target: { checked } }) => this.setState({ isLiveMode: checked })}\n                        labelPlacement={LABEL_PLACEMENT.left}\n                      >\n                        Live\n                      </Checkbox>\n                    </NavigationItem>\n                  </NavigationList>\n                </HeaderNavigation>\n                {\n                  isLiveMode\n                    ? this.renderStatsLive()\n                    : this.renderStatsHist()\n                }\n              </StyledBody>\n              <StyledAction>\n                {\n                  isLiveMode\n                    ? this.renderLiveOptions()\n                    : this.renderHistoryOptions()\n                }\n              </StyledAction>\n            </Card>\n          </ContainerInfo>\n          <CardLegend\n            co2ColorRange={co2ColorRange}\n          />\n        </BaseProvider>\n      </StyletronProvider>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}